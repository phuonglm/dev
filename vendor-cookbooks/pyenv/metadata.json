{
  "name": "pyenv",
  "description": "Manages pyenv and its installed Python versions, also providing several LWRPs.",
  "long_description": "# pyenv Chef Cookbook\n\nManages installation of multiple Python versions via\n[pyenv](https://github.com/yyuu/pyenv). Also provides a set of lightweight\nresources and providers.\n\nIf you've used [rbenv][rbenv] before, this is a port of that concept for\nPython.\n\n## pyenv Installed System-Wide with Pythons\n\nMost likely, this is the typical case. Include `recipe[pyenv::system]` in your\nrun\\_list and override the defaults you want changed. See [below](#attributes)\nfor more details.\n\n## pyenv Installed For A Specific User with Pythons\n\nIf you want a per-user install (like on a Mac/Linux workstation for\ndevelopment, CI, etc.), include `recipe[pyenv::user]` in your run\\_list and\nadd a user hash to the `user_installs` attribute list. For example:\n\n```ruby\nnode.default['pyenv']['user_installs'] = [\n  {\n    'user'     => 'archie',\n    'pythons'  => ['2.7.6', '3.3.2'],\n    'global'   => '2.7.6',\n  }\n]\n```\n\nSee [below](#attributes) for more details.\n\n## pyenv Installed System-Wide and LWRPs Defined\n\nIf you want to manage your own pyenv environment with the provided\nLWRPs, then include `recipe[pyenv::system_install]` in your run\\_list\nto prevent a default pyenv Ruby being installed. See the\n[Resources and Providers](#lwrps) section for more details.\n\n## pyenv Installed For A Specific User and LWRPs Defined\n\nIf you want to manage your own pyenv environment for users with the provided\nLWRPs, then include `recipe[pyenv::user_install]` in your run\\_list and add a\nuser hash to the `user_installs` attribute list. For example:\n\n```ruby\nnode.default['pyenv']['user_installs'] = [\n  { 'user' => 'archie' }\n]\n```\n\nSee the [Resources and Providers](#lwrps) section for more details.\n\n### Ultra-Minimal Access To LWRPs\n\nSimply include `recipe[pyenv]` in your run\\_list and the LWRPs will be\navailable to use in other cookbooks. See the [Resources and Providers](#lwrps)\nsection for more details.\n\n## Requirements\n\n### Chef\n\nTested on 11.8.2 but newer and older version should work just\nfine. File an [issue][issues] if this isn't the case.\n\n### Platform\n\nThe following platforms have been tested with this cookbook, meaning that\nthe recipes and LWRPs run on these platforms without error:\n\n* ubuntu (10.04/12.04)\n* debian (6.0)\n* freebsd\n* redhat\n* centos\n* fedora\n* amazon\n* scientific\n* suse\n* mac\\_os\\_x\n\nPlease [report][issues] any additional platforms so they can be added.\n\n### Cookbooks\n\nThere are **no** external cookbook dependencies.\n\n## Installation\n\nDepending on the situation and use case there are several ways to install\nthis cookbook. All the methods listed below assume a tagged version release\nis the target, but omit the tags to get the head of development. A valid\nChef repository structure like the [Opscode repo][chef_repo] is also assumed.\n\n### Using Berkshelf\n\n[Berkshelf][berkshelf] is a cookbook dependency manager and development\nworkflow assistant. To install Berkshelf:\n\n```bash\ncd chef-repo\ngem install berkshelf\nberks init\n```\n\n### Using Librarian-Chef\n\n[Librarian-Chef][librarian] is a bundler for your Chef cookbooks.\nTo install Librarian-Chef:\n\n```bash\ncd chef-repo\ngem install librarian\nlibrarian-chef init\n```\n\n## Recipes\n\n### default\n\nInitializes Chef to use the Lightweight Resources and Providers\n([LWRPs][lwrp]).\n\nUse this recipe explicitly if you only want access to the LWRPs provided.\n\n### system_install\n\nInstalls the `pyenv` codebase system-wide (that is, into `/usr/local/pyenv`). This\nrecipe includes *default*.\n\nUse this recipe by itself if you want `pyenv` installed system-wide but want\nto handle installing Pythons, invoking LWRPs, etc..\n\n### system\n\nInstalls the `pyenv` codebase system-wide (that is, into `/usr/local/pyenv`) and\ninstalls Pythons driven off attribute metadata. This recipe includes *default*\nand *system_install*.\n\nUse this recipe by itself if you want `pyenv` installed system-wide with\nPythons installed.\n\n### user_install\n\nInstalls the `pyenv` codebase for a list of users (selected from the\n`node['pyenv']['user_installs']` hash). This recipe includes *default*.\n\nUse this recipe by itself if you want `pyenv` installed for specific users in\nisolation but want each user to handle installing Pythons, invoking LWRPs, etc.\n\n### user\n\nInstalls the pyenv codebase for a list of users (selected from the\n`node['pyenv']['user_installs']` hash) and installs Pythons driven off\nattribute metadata. This recipe includes *default* and *user_install*.\n\nUse this recipe by itself if you want `pyenv` installed for specific users in\nisolation with Pythons installed.\n\n## Attributes\n\n### git_url\n\nThe Git URL which is used to install pyenv.\n\nThe default is `\"git://github.com/yyuu/pyenv.git\"`.\n\n### git_ref\n\nA specific Git branch/tag/reference to use when installing `pyenv`. For\nexample, to pin `pyenv` to a specific release:\n\n    node.default['pyenv']['git_ref'] = \"v0.4.0-20130613\"\n\nThe default is `\"v0.4.0-20140110.1\"`.\n\n### upgrade\n\nDetermines how to handle installing updates to the `pyenv`. There are currently\n2 valid values:\n\n* `\"none\"`, `false`, or `nil`: will not update `pyenv` and leave it in its\n  current state.\n* `\"sync\"` or `true`: updates `pyenv` to the version specified by the\n  `git_ref` attribute or the head of the master branch by default.\n\nThe default is `\"none\"`.\n\n### root_path\n\nThe path prefix to `pyenv` in a system-wide installation.\n\nThe default is `/usr/local/pyenv`.\n\n### pythons\n\nA list of additional system-wide Python versions to be built and installed.\nFor example:\n\n```ruby\nnode.default['pyenv']['pythons'] = [ \"2.7.7\", \"3.3.2\" ]\n```\n\nThe default is an empty array: `[]`.\n\n### user_pythons\n\nA list of additional system-wide Python versions to be built and installed\nper-user when not explicitly set. For example:\n\n```ruby\nnode.default['pyenv']['user_pythons'] = [ \"2.7.5\" ]\n```\n\nThe default is an empty array: `[]`.\n\n### create_profiled\n\nThe user's shell needs to know about pyenv's location and set up the\n`PATH` environment variable. This is handled in the\n[system_install](#recipes-system_install) and\n[user_install](#recipes-user_install) recipes by dropping off\n`/etc/profile.d/pyenv.sh`. However, this requires root privilege,\nwhich means that a user cannot use a \"user install\" for only their\nuser.\n\nSet this attribute to `false` to skip creation of the\n`/etc/profile.d/pyenv.sh` template. For example:\n\n```ruby\nnode.default['pyenv']['create_profiled'] = false\n```\n\nThe default is `true`.\n\n## Resources and Providers\n\n### pyenv_global\n\nThis resource sets the global version of Python to be used in all shells.\n\n#### Actions\n\n<table>\n  <thead>\n    <tr>\n      <th>Action</th>\n      <th>Description</th>\n      <th>Default</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>create</td>\n      <td>\n        Sets the global version of Python to be used in all shells.\n      </td>\n      <td>Yes</td>\n    </tr>\n  </tbody>\n</table>\n\n#### Attributes\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Default Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>pyenv_version</td>\n      <td>\n        <b>Name attribute:</b> a version of Python being managed by pyenv.\n        <b>Note:</b> the version of Python must already be installed--this LWRP\n        will not install it automatically.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>user</td>\n      <td>\n        A users's isolated pyenv installation on which to apply an action. The\n        default value of <code>nil</code> denotes a system-wide pyenv\n        installation is being targeted. <b>Note:</b> if specified, the user\n        must already exist.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>root_path</td>\n      <td>\n        The path prefix to pyenv installation, for example:\n        <code>/opt/pyenv</code>.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n  </tbody>\n</table>\n\n#### Examples\n\n##### Set A Python As Global\n\n```ruby\npyenv_global \"2.7.6\"\n```\n\n##### Set System Python As Global\n\n```ruby\npyenv_global 'system'\n```\n\n##### Set A Python As Global For A User\n\n```ruby\npyenv_global '3.3.2' do\n  user 'archie'\nend\n```\n\n### pyenv_script\n\nThis resource is a wrapper for the `script` resource which wraps the code block\nin an `pyenv`-aware environment. See the Opscode\n[script resource][script_resource] documentation for more details.\n\n#### Actions\n\n<table>\n  <thead>\n    <tr>\n      <th>Action</th>\n      <th>Description</th>\n      <th>Default</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>run</td>\n      <td>Run the script</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <td>nothing</td>\n      <td>Do not run this command</td>\n      <td>&nbsp;</td>\n    </tr>\n  </tbody>\n</table>\n\nUse `action :nothing` to set a command to only run if another resource\nnotifies it.\n\n#### Attributes\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Default Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>name</td>\n      <td>\n        <b>Name attribute:</b> Name of the command to execute.\n      </td>\n      <td>name</td>\n    </tr>\n    <tr>\n      <td>pyenv_version</td>\n      <td>\n        A version of Python being managed by pyenv.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>root_path</td>\n      <td>\n        The path prefix to pyenv installation, for example:\n        <code>/opt/pyenv</code>.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>code</td>\n      <td>\n        Quoted script of code to execute.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>creates</td>\n      <td>\n        A file this command creates - if the file exists, the command will not\n        be run.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>cwd</td>\n      <td>\n        Current working directory to run the command from.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>environment</td>\n      <td>\n        A has of environment variables to set before running this command.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>group</td>\n      <td>\n        A group or group ID that we should change to before running this\n        command.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>path</td>\n      <td>\n        An array of paths to use when searching for the command.\n      </td>\n      <td><code>nil</code>, uses system path</td>\n    </tr>\n    <tr>\n      <td>returns</td>\n      <td>\n        The return value of the command (may be an array of accepted values) -\n        this resource raises an exception if the return value(s) do not match.\n      </td>\n      <td><code>0</code></td>\n    </tr>\n    <tr>\n      <td>timeout</td>\n      <td>\n        How many seconds to let the command run before timing out.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>user</td>\n      <td>\n        A users's isolated pyenv installation on which to apply an action. The\n        default value of <code>nil</code> denotes a system-wide pyenv\n        installation is being targeted. <b>Note:</b> if specified, the user\n        must already exist.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>umask</td>\n      <td>\n        Umask for files created by the command.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n  </tbody>\n</table>\n\n#### Examples\n\n##### Run A Rake Task\n\n```ruby\npyenv_script 'migrate_rails_database' do\n  pyenv_version '2.7.6'\n  user          'deploy'\n  group         'deploy'\n  cwd           '/srv/webapp/current'\n  code          %{python manage.py syncdb}\nend\n```\n\n### pyenv_rehash\n\nThis resource installs shims for all Python binaries known to `pyenv`.\n\n#### Actions\n\n<table>\n  <thead>\n    <tr>\n      <th>Action</th>\n      <th>Description</th>\n      <th>Default</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>run</td>\n      <td>Run the script</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <td>nothing</td>\n      <td>Do not run this command</td>\n      <td>&nbsp;</td>\n    </tr>\n  </tbody>\n</table>\n\nUse `action :nothing` to set a command to only run if another resource\nnotifies it.\n\n#### Attributes\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Default Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>name</td>\n      <td>\n        <b>Name attribute:</b> Name of the command to execute.\n      </td>\n      <td>name</td>\n    </tr>\n    <tr>\n      <td>user</td>\n      <td>\n        A users's isolated pyenv installation on which to apply an action. The\n        default value of <code>nil</code> denotes a system-wide pyenv\n        installation is being targeted. <b>Note:</b> if specified, the user\n        must already exist.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>root_path</td>\n      <td>\n        The path prefix to pyenv installation, for example:\n        <code>/opt/pyenv</code>.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n  </tbody>\n</table>\n\n#### Examples\n\n##### Rehash A System-Wide pyenv\n\n```ruby\npyenv_rehash 'Doing the rehash dance'\n```\n\n##### Rehash A User's pyenv\n\n```ruby\npyenv_rehash \"Rehashing archie's pyenv\" do\n  user 'archie'\nend\n```\n\n### pyenv_python\n\nThis resource installs a specified version of Python.\n\n#### Actions\n\n<table>\n  <thead>\n    <tr>\n      <th>Action</th>\n      <th>Description</th>\n      <th>Default</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>install</td>\n      <td>\n        Build and install a Python version.\n      </td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <td>reinstall</td>\n      <td>\n        Force a recompiliation of the Python version from source. The\n        `:install` action will skip a build if the target install directory\n        already exists.\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </tbody>\n</table>\n\n#### Attributes\n\n<table>\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Description</th>\n      <th>Default Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>version</td>\n      <td>\n        <b>Name attribute:</b> the name of a Python version (e.g. `2.7.6`)\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>user</td>\n      <td>\n        A users's isolated pyenv installation on which to apply an action. The\n        default value of <code>nil</code> denotes a system-wide pyenv\n        installation is being targeted. <b>Note:</b> if specified, the user\n        must already exist.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n    <tr>\n      <td>root_path</td>\n      <td>\n        The path prefix to pyenv installation, for example:\n        <code>/opt/pyenv</code>.\n      </td>\n      <td><code>nil</code></td>\n    </tr>\n  </tbody>\n</table>\n\n#### Examples\n\n##### Install Python 2.7.6\n\n```ruby\npyenv_python '2.7.6' do\n  action :install\nend\n```\n\n```ruby\npyenv_python '2.7.6'\n```\n\n**Note:** the install action is default, so the second example is a more common\nusage.\n\n##### Reinstall Python\n\n```ruby\npyenv_python '2.7.6' do\n  action :reinstall\nend\n```\n\n## System-Wide Mac Installation Note\n\nThis cookbook takes advantage of managing profile fragments in an\n`/etc/profile.d` directory, common on most Unix-flavored platforms.\nUnfortunately, Mac OS X does not support this idiom out of the box,\nso you may need to [modify][mac_profile_d] your user profile.\n\n## License and Author\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n[berkshelf]:        http://berkshelf.com/\n[chef_repo]:        https://github.com/opscode/chef-repo\n[librarian]:        https://github.com/applicationsonline/librarian#readme\n[lwrp]:             http://docs.opscode.com/lwrp_custom.html\n[mac_profile_d]:    http://hints.macworld.com/article.php?story=20011221192012445\n[script_resource]:  http://docs.opscode.com/resource_script.html\n[rbenv]:            https://github.com/sstephenson/rbenv\n",
  "maintainer": "Shane da Silva",
  "maintainer_email": "shane@dasilva.io",
  "license": "Apache 2.0",
  "platforms": {
    "amazon": ">= 0.0.0",
    "centos": ">= 0.0.0",
    "debian": ">= 0.0.0",
    "fedora": ">= 0.0.0",
    "freebsd": ">= 0.0.0",
    "mac_os_x": ">= 0.0.0",
    "redhat": ">= 0.0.0",
    "scientific": ">= 0.0.0",
    "suse": ">= 0.0.0",
    "ubuntu": ">= 0.0.0"
  },
  "dependencies": {
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
  },
  "version": "0.1.0",
  "source_url": "",
  "issues_url": ""
}